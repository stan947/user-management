{
  "collection": {
    "_": {
      "postman_id": "a91880a3-7caf-4158-b0eb-d4a461322498",
      "exporter_id": "41703265"
    },
    "item": [
      {
        "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
        "name": "TS_01. Register new user",
        "item": [
          {
            "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
            "name": "TC_1.1.1. Positive register new user",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\r\n\r\n\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                    "\r",
                    "const uniquePassword = \"psw\" + Date.now();\r",
                    "    let requestBody =  {\r",
                    "        \"username\": randomUsername,\r",
                    "        \"password\": uniquePassword,\r",
                    "        \"fullName\": \"Vardenis Pavardenis\",\r",
                    "        \"email\": \"demo@demo.com\"\r",
                    "    }\r",
                    "\r",
                    "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                    "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                    "\r",
                    "    pm.request.body.raw = JSON.stringify(requestBody)"
                  ],
                  "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 201\", function () {\r",
                    "  pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 500ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"User object schema is valid\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "  pm.expect(responseData.user).to.be.an('object');\r",
                    "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                    "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                    "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disabledSystemHeaders": {}
            }
          },
          {
            "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
            "name": "TC_1.1.2. Get user details -register",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "user",
                  ":{{registerLoginUserName}}"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "",
                    "key": "{{registerLoginUserName}}"
                  }
                ]
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "  pm.expect(pm.response.code).to.equal(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 200ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.message).to.exist;\r",
                    "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                    "    pm.expect(responseData.user.username).to.exist;\r",
                    "    pm.expect(responseData.user.fullName).to.exist;\r",
                    "    pm.expect(responseData.user.email).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Username and email are in a valid format\", function () {\r",
                    "  const responseData = pm.response.json();\r",
                    "  \r",
                    "  pm.expect(responseData).to.be.an('object');\r",
                    "\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
            "name": "TC_1.2. Register new user - no username",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "login"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 401\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(401);\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has the required fields\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.error).to.exist;\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response schema is as expected\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData).to.have.property('error');\r",
                    "});\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response time is less than 200ms\", function () {\r",
                    "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                }
              }
            ]
          },
          {
            "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
            "name": "TC_1.3. Register new user - no password",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "login"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": []
          },
          {
            "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
            "name": "TC_1.4. Register new user - no fullname",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "4bc0501a-742a-4168-a997-28994ab984e1",
            "name": "TC_1.5. Register new user - no email",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
            "name": "TC_1.6. Register new user - empty username",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
            "name": "TC_1.7. Register new user - empty password",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
            "name": "TC_1.8. Register new user - empy fullname",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
            "name": "TC_1.9. Register new user - empty email",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
            "name": "TC_1.10. Register new user - empty all parameters",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "feca6552-92ab-43e2-a351-9727b38bc70b",
        "name": "TS_02. Login (register and login)",
        "item": [
          {
            "id": "49dbdb89-5724-47ba-908b-c42866c2afea",
            "name": "TC_2.1.1. Register new user - login",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "register"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"Petras123\", \r\n\"fullName\": \"Petras Petraitis\", \r\n\"email\": \"Petras.Petrastis@gmail.com\"\r\n\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": []
          },
          {
            "id": "7b0c9701-e10f-44a8-9937-c3c580019e7e",
            "name": "TC_2.1.2. Positive login",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "user"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "2ed19610-3264-48d2-a761-929b647c7298",
            "name": "TC_2.2. Negative login - no username",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "logout"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "68eb20ca-088d-4456-b23a-541eb07f00fa",
            "name": "TC_2.3. Negative login - no password",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "logout"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "948232a0-31e4-4bf3-9509-bd25167ca0db",
            "name": "TC_2.4. Negative login - empty username",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "logout"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "bb3199d1-39a4-4638-8725-44c107900473",
            "name": "TC_2.5. Negative login - empty password",
            "request": {
              "url": {
                "protocol": "http",
                "port": "3000",
                "path": [
                  "logout"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "3bd8d99e-1ec4-4f5d-b0e8-3ed355d77ba2",
        "name": "TS_03. Get users",
        "item": [
          {
            "id": "2fe5687a-5e0a-4058-89bc-02f351ab5a50",
            "name": "TC_3.1.1. Create new user - Get",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "76b98eed-08ae-4096-9328-7d2848299c11",
            "name": "TC_3.1.2. Positive Get all users",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "031d939f-c9e5-4c8d-a71a-feb1fcaf0f5a",
            "name": "TC_3.2. Positive Get user details",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "192c98dd-598f-4dd5-9753-f4ba1246e4a2",
            "name": "TC_3.3. Negative Get not-existing user details",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "40c35178-02ec-467a-b509-98d09db38ae5",
        "name": "TS_04. Logout (register, login and logout)",
        "item": [
          {
            "id": "391bb453-07fe-4149-bbca-0c91fc553ec4",
            "name": "TC_4.1.1. Create new user - logout",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "74fefa35-5a09-409d-82dc-5c1e4fefc5f3",
            "name": "TC_4.1.2. Login - logout",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "82cd9d9f-1d74-43ad-ab72-dfd08a149beb",
            "name": "TC_4.1.3. Positive logout",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "d8b551dd-753d-4fe8-933d-1b258a3676c3",
        "name": "TS_05. Delete (Register and delete user)",
        "item": [
          {
            "id": "984d3577-0aec-4219-a111-8618f17eb4f8",
            "name": "TC_5.1.1. Register new user - delete",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": []
          },
          {
            "id": "c1bcf71b-faf1-4472-b5c1-6d557ed5ea51",
            "name": "TC_5.1.2. Positive Delete new user",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": []
          },
          {
            "id": "79f686af-bde1-416e-888e-80539d0ff0df",
            "name": "TC_5.1.3. Get user details - delete",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "b007b9cc-a9f7-4501-8027-b6b473b17d82",
            "name": "TC_5.2. Delete non-existing user",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "registerLoginUserName"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerLoginPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerLoginWrongPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerGetUserName"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerGetPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerNewUserName"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerNewUserPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "registerLoginUserPassword"
      }
    ],
    "info": {
      "_postman_id": "a91880a3-7caf-4158-b0eb-d4a461322498",
      "name": "UserManagement",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "bd586e8d-c33e-4b11-b3f2-650523b5f811",
    "values": []
  },
  "globals": {
    "id": "39e7b35f-fae1-4fad-897e-c38e20d42262",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 28,
        "pending": 0,
        "failed": 28
      },
      "tests": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 11,
        "pending": 0,
        "failed": 11
      },
      "testScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 2,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1739861867841,
      "completed": 1739861870519
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e148ac4-5fbc-40f0-b440-237c76a750f6",
          "httpRequestId": "9ea5c76d-1112-484e-9636-caee3cb213c3"
        },
        "item": {
          "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
          "name": "TC_1.1.1. Positive register new user",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n\r\n\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                  "\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  "    let requestBody =  {\r",
                  "        \"username\": randomUsername,\r",
                  "        \"password\": uniquePassword,\r",
                  "        \"fullName\": \"Vardenis Pavardenis\",\r",
                  "        \"email\": \"demo@demo.com\"\r",
                  "    }\r",
                  "\r",
                  "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                  "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                  "\r",
                  "    pm.request.body.raw = JSON.stringify(requestBody)"
                ],
                "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"User object schema is valid\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.user).to.be.an('object');\r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c6a55bb7-9fb0-4374-8847-6df9c99ebbc0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"username\":\"user_4706\",\"password\":\"psw1739861867886\",\"fullName\":\"Vardenis Pavardenis\",\"email\":\"demo@demo.com\"}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "User object schema is valid",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "User object schema is valid",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c9e434dc-f499-4f13-982b-35781e683446",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e7e49991-a04a-4858-b11a-80d72ca47215"
        },
        "item": {
          "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
          "name": "TC_1.1.2. Get user details -register",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                ":{{registerLoginUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "",
                  "key": "{{registerLoginUserName}}"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist;\r",
                  "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  "    pm.expect(responseData.user.username).to.exist;\r",
                  "    pm.expect(responseData.user.fullName).to.exist;\r",
                  "    pm.expect(responseData.user.email).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Username and email are in a valid format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "user",
              ":"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7d64ba5b-3718-49de-9990-44d809c06eaa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status code is 200",
              "message": "expected undefined to equal 200",
              "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 200ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response has the required fields",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "Username and email are in a valid format",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Username and email are in a valid format",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6d8098e8-291f-43d9-b4d2-5d2aafbefb39",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fce0b2ba-28f4-4d05-b889-3be9a696a3fd"
        },
        "item": {
          "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
          "name": "TC_1.2. Register new user - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response schema is as expected\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('error');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09325f15-3608-4ee6-9ebd-4bcceee8835f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status code is 401",
              "message": "expected undefined to equal 401",
              "stack": "AssertionError: expected undefined to equal 401\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response has the required fields",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has the required fields",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Response schema is as expected",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response schema is as expected",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response time is less than 200ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "963e1913-92b3-4ee8-b291-07d3ce9bbad7",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d228f91-ded0-4dce-9cf7-5d5fa0bfc9e3"
        },
        "item": {
          "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
          "name": "TC_1.3. Register new user - no password",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "98ebf053-ccd5-4e16-86fd-cf733b7ff88b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "f7b6755c-3c32-4d7d-bbc4-cc53be16f63a",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bdbb7e88-d41e-4219-99be-c5128693a510"
        },
        "item": {
          "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
          "name": "TC_1.4. Register new user - no fullname",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "531bfd62-7ee2-422a-a162-4012fe4101fc",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e30e1312-2ae7-44e6-8427-756521e64ca2"
        },
        "item": {
          "id": "4bc0501a-742a-4168-a997-28994ab984e1",
          "name": "TC_1.5. Register new user - no email",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "4bc0501a-742a-4168-a997-28994ab984e1",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "77abadf2-7df7-42de-9bd3-b2b44535fe64",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "11e2b9ab-2720-4181-944b-ea65d254ef45"
        },
        "item": {
          "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
          "name": "TC_1.6. Register new user - empty username",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "34510996-6615-4c3c-bcc1-f2f78130fe61",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b69cb19-26b4-4b98-bbf1-99bd0b3efd3a"
        },
        "item": {
          "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
          "name": "TC_1.7. Register new user - empty password",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "1f604519-d459-40ed-8505-5c625297e74e",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fe6b8d84-e842-4d37-9e6a-947f09615658"
        },
        "item": {
          "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
          "name": "TC_1.8. Register new user - empy fullname",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "fbc1797f-c44f-4e28-8336-7dc5f6716619",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e038e37d-6643-494b-b9cb-5bb46017d300"
        },
        "item": {
          "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
          "name": "TC_1.9. Register new user - empty email",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "bd2d2a50-46ca-4510-ba4c-dbdcda8799f1",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da4ab013-d725-41a8-b4cc-76ae5d014e7b"
        },
        "item": {
          "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
          "name": "TC_1.10. Register new user - empty all parameters",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "54ffcf11-7558-45e2-92d6-f7a8d1c68b1f",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "09d1f169-83bd-4277-a3f6-e75df98f8ec6"
        },
        "item": {
          "id": "49dbdb89-5724-47ba-908b-c42866c2afea",
          "name": "TC_2.1.1. Register new user - login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"Petras123\", \r\n\"fullName\": \"Petras Petraitis\", \r\n\"email\": \"Petras.Petrastis@gmail.com\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "624f8188-e4d4-4855-86ef-8e4f3dd5a48e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"Petras123\", \r\n\"fullName\": \"Petras Petraitis\", \r\n\"email\": \"Petras.Petrastis@gmail.com\"\r\n\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "49dbdb89-5724-47ba-908b-c42866c2afea",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "abe76f24-6e6a-45cd-afc3-c6ecaf28e166",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4bb5b68e-984b-4df9-8740-caffbf0430e5"
        },
        "item": {
          "id": "7b0c9701-e10f-44a8-9937-c3c580019e7e",
          "name": "TC_2.1.2. Positive login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "user"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8a6b4809-8656-40e9-940f-6b1bd79afb2d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "id": "7b0c9701-e10f-44a8-9937-c3c580019e7e",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "b710ffe5-b5fa-4d4a-bd06-ac404b462516",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "40cc0b6f-e365-4531-8a61-c46d9f1f64e4"
        },
        "item": {
          "id": "2ed19610-3264-48d2-a761-929b647c7298",
          "name": "TC_2.2. Negative login - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5b019d2c-8aec-40b3-a270-9524f0f71b01",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "id": "2ed19610-3264-48d2-a761-929b647c7298",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "e77b5b86-bcd9-443b-88e0-e0eb8564ac0e",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "661b48c3-23fd-4ccd-b4b8-b2220f662e74"
        },
        "item": {
          "id": "68eb20ca-088d-4456-b23a-541eb07f00fa",
          "name": "TC_2.3. Negative login - no password",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8fc47001-5670-4c1f-af6a-9d91b5b34785",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "id": "68eb20ca-088d-4456-b23a-541eb07f00fa",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "89aec4ba-bb2c-4d16-8fcb-96eb09ba97ae",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0d31fbdd-158f-4511-a3fa-36db287ad446"
        },
        "item": {
          "id": "948232a0-31e4-4bf3-9509-bd25167ca0db",
          "name": "TC_2.4. Negative login - empty username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d76de659-c748-4009-83e2-fc0c9ece45ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "id": "948232a0-31e4-4bf3-9509-bd25167ca0db",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "97a7c628-41b8-4bde-8534-296533e3cd17",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6a6ac35b-2874-4e66-87a9-ef80f95a8baf"
        },
        "item": {
          "id": "bb3199d1-39a4-4638-8725-44c107900473",
          "name": "TC_2.5. Negative login - empty password",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1bc98586-ed27-42c2-9e35-3bd945dd83ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "id": "bb3199d1-39a4-4638-8725-44c107900473",
        "requestError": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "385917f7-abdb-4e29-bc4a-ca371f417aab",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b57f84f9-66f9-485c-b585-daca5d6e613d"
        },
        "item": {
          "id": "2fe5687a-5e0a-4058-89bc-02f351ab5a50",
          "name": "TC_3.1.1. Create new user - Get",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "2fe5687a-5e0a-4058-89bc-02f351ab5a50",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "c881e972-0e75-4f6f-a769-04f7f032cc4b",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "838a6e1d-98c4-4951-8d9c-9b546e242207"
        },
        "item": {
          "id": "76b98eed-08ae-4096-9328-7d2848299c11",
          "name": "TC_3.1.2. Positive Get all users",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "id": "76b98eed-08ae-4096-9328-7d2848299c11",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "cd0451d7-cc6c-42b7-b9bb-29f8696260bd",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7f2624a6-b0fd-4a05-a115-c73a7c19eeab"
        },
        "item": {
          "id": "031d939f-c9e5-4c8d-a71a-feb1fcaf0f5a",
          "name": "TC_3.2. Positive Get user details",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "id": "031d939f-c9e5-4c8d-a71a-feb1fcaf0f5a",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "27b95fde-7946-48db-94af-b584dfbad50c",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a36e22ff-2f8d-4ee1-8150-dfa22fca9dce"
        },
        "item": {
          "id": "192c98dd-598f-4dd5-9753-f4ba1246e4a2",
          "name": "TC_3.3. Negative Get not-existing user details",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "id": "192c98dd-598f-4dd5-9753-f4ba1246e4a2",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "8a00a399-cd43-43ef-b2f3-2db6e4eefa30",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e8a97b75-b1c1-4316-93e3-00c2b683ad79"
        },
        "item": {
          "id": "391bb453-07fe-4149-bbca-0c91fc553ec4",
          "name": "TC_4.1.1. Create new user - logout",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "391bb453-07fe-4149-bbca-0c91fc553ec4",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "3d51060a-53f6-4072-b14a-23d4aa2b931c",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "58e4dc9e-a07a-41dd-9983-e1b29a9e0dd7"
        },
        "item": {
          "id": "74fefa35-5a09-409d-82dc-5c1e4fefc5f3",
          "name": "TC_4.1.2. Login - logout",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "74fefa35-5a09-409d-82dc-5c1e4fefc5f3",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "562fec76-e6f5-41c3-90d7-e47faad13d30",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "10c51f7d-5022-424d-893a-78597a6fab49"
        },
        "item": {
          "id": "82cd9d9f-1d74-43ad-ab72-dfd08a149beb",
          "name": "TC_4.1.3. Positive logout",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "82cd9d9f-1d74-43ad-ab72-dfd08a149beb",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "b228b51c-8dcf-4e28-8689-a896f1fc7ab9",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a03a3b99-c326-43fa-88d2-7cdc14e20937"
        },
        "item": {
          "id": "984d3577-0aec-4219-a111-8618f17eb4f8",
          "name": "TC_5.1.1. Register new user - delete",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "984d3577-0aec-4219-a111-8618f17eb4f8",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "d19af263-2d86-44f5-bc53-55cd3968b933",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dc5cd918-7e5e-44dc-a534-b3bfb4ac8b7e"
        },
        "item": {
          "id": "c1bcf71b-faf1-4472-b5c1-6d557ed5ea51",
          "name": "TC_5.1.2. Positive Delete new user",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "id": "c1bcf71b-faf1-4472-b5c1-6d557ed5ea51",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "4446c733-2a0b-4cf4-8aaa-52b6425a0774",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fe4cf83a-8f7a-4937-bf6a-a7c33253ab2f"
        },
        "item": {
          "id": "79f686af-bde1-416e-888e-80539d0ff0df",
          "name": "TC_5.1.3. Get user details - delete",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "id": "79f686af-bde1-416e-888e-80539d0ff0df",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "aba20926-59b0-4882-8851-8f6c3bb7fec3",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "14846444-4c0f-420f-9fc3-b8dba35d41e4"
        },
        "item": {
          "id": "b007b9cc-a9f7-4501-8027-b6b473b17d82",
          "name": "TC_5.2. Delete non-existing user",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "id": "b007b9cc-a9f7-4501-8027-b6b473b17d82",
        "requestError": {}
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "4d57d2c0-4273-4bd9-a31e-28c840a338db",
          "timestamp": 1739861867942,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
          "name": "TC_1.1.1. Positive register new user",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c6a55bb7-9fb0-4374-8847-6df9c99ebbc0",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"user_4706\",\"password\":\"psw1739861867886\",\"fullName\":\"Vardenis Pavardenis\",\"email\":\"demo@demo.com\"}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                  "\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  "    let requestBody =  {\r",
                  "        \"username\": randomUsername,\r",
                  "        \"password\": uniquePassword,\r",
                  "        \"fullName\": \"Vardenis Pavardenis\",\r",
                  "        \"email\": \"demo@demo.com\"\r",
                  "    }\r",
                  "\r",
                  "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                  "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                  "\r",
                  "    pm.request.body.raw = JSON.stringify(requestBody)"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"User object schema is valid\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.user).to.be.an('object');\r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e148ac4-5fbc-40f0-b440-237c76a750f6",
          "httpRequestId": "9ea5c76d-1112-484e-9636-caee3cb213c3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "403b177f756583a56215ce9ef9611aa5",
          "id": "0cb8b30e-a9f1-46e2-bcb9-f46a634f05ef",
          "timestamp": 1739861867977,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
          "name": "TC_1.1.1. Positive register new user",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n\r\n\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                  "\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  "    let requestBody =  {\r",
                  "        \"username\": randomUsername,\r",
                  "        \"password\": uniquePassword,\r",
                  "        \"fullName\": \"Vardenis Pavardenis\",\r",
                  "        \"email\": \"demo@demo.com\"\r",
                  "    }\r",
                  "\r",
                  "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                  "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                  "\r",
                  "    pm.request.body.raw = JSON.stringify(requestBody)"
                ],
                "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"User object schema is valid\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.user).to.be.an('object');\r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          }
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e148ac4-5fbc-40f0-b440-237c76a750f6",
          "httpRequestId": "9ea5c76d-1112-484e-9636-caee3cb213c3",
          "scriptId": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
          "execution": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "010c3c32204d0fffa8907dfdc3734a58",
          "id": "14002c9b-6d3b-4ad3-9bd7-e34b0fb4584a",
          "timestamp": 1739861867982,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
          "name": "TC_1.1.1. Positive register new user",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n\r\n\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                  "\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  "    let requestBody =  {\r",
                  "        \"username\": randomUsername,\r",
                  "        \"password\": uniquePassword,\r",
                  "        \"fullName\": \"Vardenis Pavardenis\",\r",
                  "        \"email\": \"demo@demo.com\"\r",
                  "    }\r",
                  "\r",
                  "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                  "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                  "\r",
                  "    pm.request.body.raw = JSON.stringify(requestBody)"
                ],
                "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"User object schema is valid\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.user).to.be.an('object');\r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          }
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e148ac4-5fbc-40f0-b440-237c76a750f6",
          "httpRequestId": "9ea5c76d-1112-484e-9636-caee3cb213c3",
          "scriptId": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
          "execution": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "User object schema is valid",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "9faf4fb8d3076e16a567d92e6601b1f2",
          "id": "a88b5a2c-13dd-47e2-9363-b84cf5312147",
          "timestamp": 1739861867984,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
          "name": "TC_1.1.1. Positive register new user",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n\r\n\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                  "\r",
                  "const uniquePassword = \"psw\" + Date.now();\r",
                  "    let requestBody =  {\r",
                  "        \"username\": randomUsername,\r",
                  "        \"password\": uniquePassword,\r",
                  "        \"fullName\": \"Vardenis Pavardenis\",\r",
                  "        \"email\": \"demo@demo.com\"\r",
                  "    }\r",
                  "\r",
                  "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                  "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                  "\r",
                  "    pm.request.body.raw = JSON.stringify(requestBody)"
                ],
                "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 201\", function () {\r",
                  "  pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"User object schema is valid\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "  pm.expect(responseData.user).to.be.an('object');\r",
                  "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                  "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                  "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          }
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e148ac4-5fbc-40f0-b440-237c76a750f6",
          "httpRequestId": "9ea5c76d-1112-484e-9636-caee3cb213c3",
          "scriptId": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
          "execution": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "b15ee136-eec5-44e0-9218-5e35a78b0156",
          "timestamp": 1739861868044,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
          "name": "TC_1.1.2. Get user details -register",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                ":"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7d64ba5b-3718-49de-9990-44d809c06eaa",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist;\r",
                  "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  "    pm.expect(responseData.user.username).to.exist;\r",
                  "    pm.expect(responseData.user.fullName).to.exist;\r",
                  "    pm.expect(responseData.user.email).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Username and email are in a valid format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "c9e434dc-f499-4f13-982b-35781e683446",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e7e49991-a04a-4858-b11a-80d72ca47215"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status code is 200",
          "message": "expected undefined to equal 200",
          "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "86ac7467da16fb9bf947a1eb12700699",
          "id": "077d6dae-c11e-476f-858d-16dd1baa063d",
          "timestamp": 1739861868058,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
          "name": "TC_1.1.2. Get user details -register",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                ":{{registerLoginUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "",
                  "key": "{{registerLoginUserName}}"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist;\r",
                  "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  "    pm.expect(responseData.user.username).to.exist;\r",
                  "    pm.expect(responseData.user.fullName).to.exist;\r",
                  "    pm.expect(responseData.user.email).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Username and email are in a valid format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c9e434dc-f499-4f13-982b-35781e683446",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e7e49991-a04a-4858-b11a-80d72ca47215",
          "scriptId": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
          "execution": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 200ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "66ebb2f596ab144e9e3305a1d373820a",
          "id": "e83ac30f-bed1-413c-8010-111099e48a7c",
          "timestamp": 1739861868059,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
          "name": "TC_1.1.2. Get user details -register",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                ":{{registerLoginUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "",
                  "key": "{{registerLoginUserName}}"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist;\r",
                  "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  "    pm.expect(responseData.user.username).to.exist;\r",
                  "    pm.expect(responseData.user.fullName).to.exist;\r",
                  "    pm.expect(responseData.user.email).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Username and email are in a valid format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c9e434dc-f499-4f13-982b-35781e683446",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e7e49991-a04a-4858-b11a-80d72ca47215",
          "scriptId": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
          "execution": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response has the required fields",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "21a67eab3bcc58998d990388528e9d3d",
          "id": "0823befc-9d81-41d0-a472-d8f5b2d4e186",
          "timestamp": 1739861868059,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
          "name": "TC_1.1.2. Get user details -register",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                ":{{registerLoginUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "",
                  "key": "{{registerLoginUserName}}"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist;\r",
                  "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  "    pm.expect(responseData.user.username).to.exist;\r",
                  "    pm.expect(responseData.user.fullName).to.exist;\r",
                  "    pm.expect(responseData.user.email).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Username and email are in a valid format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c9e434dc-f499-4f13-982b-35781e683446",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e7e49991-a04a-4858-b11a-80d72ca47215",
          "scriptId": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
          "execution": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Username and email are in a valid format",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:2)",
          "checksum": "115bac21fd323da6693711c85ce8e6f9",
          "id": "4fbf27be-aeda-4e92-a013-0787b2ffe5d7",
          "timestamp": 1739861868060,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
          "name": "TC_1.1.2. Get user details -register",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user",
                ":{{registerLoginUserName}}"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "",
                  "key": "{{registerLoginUserName}}"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist;\r",
                  "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                  "    pm.expect(responseData.user.username).to.exist;\r",
                  "    pm.expect(responseData.user.fullName).to.exist;\r",
                  "    pm.expect(responseData.user.email).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Username and email are in a valid format\", function () {\r",
                  "  const responseData = pm.response.json();\r",
                  "  \r",
                  "  pm.expect(responseData).to.be.an('object');\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c9e434dc-f499-4f13-982b-35781e683446",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e7e49991-a04a-4858-b11a-80d72ca47215",
          "scriptId": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
          "execution": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "67d550e9-3ffc-4ca1-a5bd-1928341ce761",
          "timestamp": 1739861868150,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
          "name": "TC_1.2. Register new user - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "09325f15-3608-4ee6-9ebd-4bcceee8835f",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response schema is as expected\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('error');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6d8098e8-291f-43d9-b4d2-5d2aafbefb39",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fce0b2ba-28f4-4d05-b889-3be9a696a3fd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status code is 401",
          "message": "expected undefined to equal 401",
          "stack": "AssertionError: expected undefined to equal 401\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "09e47727c95d794d2fa39c100711a968",
          "id": "ff98a1e1-1e2f-40f4-bf6d-1e5a6b4f2021",
          "timestamp": 1739861868170,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
          "name": "TC_1.2. Register new user - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response schema is as expected\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('error');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
              }
            }
          ]
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6d8098e8-291f-43d9-b4d2-5d2aafbefb39",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fce0b2ba-28f4-4d05-b889-3be9a696a3fd",
          "scriptId": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
          "execution": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has the required fields",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "389a2de58acd1e294e1cbffe41ff4b28",
          "id": "2c59f99d-91cf-4aaa-ba0e-a17559c39046",
          "timestamp": 1739861868172,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
          "name": "TC_1.2. Register new user - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response schema is as expected\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('error');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
              }
            }
          ]
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6d8098e8-291f-43d9-b4d2-5d2aafbefb39",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fce0b2ba-28f4-4d05-b889-3be9a696a3fd",
          "scriptId": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
          "execution": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response schema is as expected",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "a2857acc469c29c7e3b58a82ef68ba9c",
          "id": "e05ec598-99ad-42b8-a214-9f40ee5a373c",
          "timestamp": 1739861868173,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
          "name": "TC_1.2. Register new user - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response schema is as expected\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('error');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
              }
            }
          ]
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6d8098e8-291f-43d9-b4d2-5d2aafbefb39",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fce0b2ba-28f4-4d05-b889-3be9a696a3fd",
          "scriptId": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
          "execution": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response time is less than 200ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:4:3)",
          "checksum": "62b1b73398f9cb000cbc9c4e57073ab5",
          "id": "06984ebb-5acb-4810-9454-574b90a7581a",
          "timestamp": 1739861868174,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
          "name": "TC_1.2. Register new user - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.error).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response schema is as expected\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('error');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 200ms\", function () {\r",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
              }
            }
          ]
        },
        "parent": {
          "id": "37cb3a04-165a-4e3d-be26-5bdb713a9256",
          "name": "TS_01. Register new user",
          "item": [
            {
              "id": "69771a82-8b6c-4695-b346-e873d59bb23e",
              "name": "TC_1.1.1. Positive register new user",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "register"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5eaa2682-70ef-47df-9092-0d9fbb3f5327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
                      "\r",
                      "const uniquePassword = \"psw\" + Date.now();\r",
                      "    let requestBody =  {\r",
                      "        \"username\": randomUsername,\r",
                      "        \"password\": uniquePassword,\r",
                      "        \"fullName\": \"Vardenis Pavardenis\",\r",
                      "        \"email\": \"demo@demo.com\"\r",
                      "    }\r",
                      "\r",
                      "    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
                      "    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
                      "\r",
                      "    pm.request.body.raw = JSON.stringify(requestBody)"
                    ],
                    "_lastExecutionId": "298831ee-078b-4fdc-aa9c-22929f539501"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7dd10f48-5e8a-427b-b812-535a72bd6df1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "  pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"User object schema is valid\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "  pm.expect(responseData.user).to.be.an('object');\r",
                      "  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
                      "  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
                      "  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b3e6c3f2-53a2-445f-9ea1-3cbf3b1f8ba1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "fbf2c8dd-61ab-4f62-a1ce-52f0f270e091",
              "name": "TC_1.1.2. Get user details -register",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "user",
                    ":{{registerLoginUserName}}"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "",
                      "key": "{{registerLoginUserName}}"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c81108-2153-4e9c-8205-469e07fdc9b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist;\r",
                      "    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
                      "    pm.expect(responseData.user.username).to.exist;\r",
                      "    pm.expect(responseData.user.fullName).to.exist;\r",
                      "    pm.expect(responseData.user.email).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Username and email are in a valid format\", function () {\r",
                      "  const responseData = pm.response.json();\r",
                      "  \r",
                      "  pm.expect(responseData).to.be.an('object');\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "1fb604fe-0016-4270-bc1e-cc48e93c182d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42f156d4-dd86-40c4-a9c0-5c87463a141b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "160ae07f-ce46-4c95-9cf5-2eba13235fb1"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f47e4c57-042d-4a6f-97dd-651871f6214e",
              "name": "TC_1.2. Register new user - no username",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.error).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response schema is as expected\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('error');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
                  }
                }
              ]
            },
            {
              "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
              "name": "TC_1.3. Register new user - no password",
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "3000",
                  "path": [
                    "login"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
              "name": "TC_1.4. Register new user - no fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4bc0501a-742a-4168-a997-28994ab984e1",
              "name": "TC_1.5. Register new user - no email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
              "name": "TC_1.6. Register new user - empty username",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
              "name": "TC_1.7. Register new user - empty password",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
              "name": "TC_1.8. Register new user - empy fullname",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
              "name": "TC_1.9. Register new user - empty email",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            },
            {
              "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
              "name": "TC_1.10. Register new user - empty all parameters",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6d8098e8-291f-43d9-b4d2-5d2aafbefb39",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fce0b2ba-28f4-4d05-b889-3be9a696a3fd",
          "scriptId": "53b08eb7-2815-4d67-adb1-fbccc6c21a80",
          "execution": "5c7a7039-ecfd-45ae-9db5-6348556c64a0"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "64b148c7-e65d-4271-ad86-aa89c8e4742f",
          "timestamp": 1739861868262,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f9fe7b6b-2c09-43b1-86cc-d6ec3431d58f",
          "name": "TC_1.3. Register new user - no password",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "98ebf053-ccd5-4e16-86fd-cf733b7ff88b",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "963e1913-92b3-4ee8-b291-07d3ce9bbad7",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d228f91-ded0-4dce-9cf7-5d5fa0bfc9e3"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "53638aa2-338e-477b-bb5d-b9e0afbe1bed",
          "timestamp": 1739861868340,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "9682d9e2-5c8e-4933-b18e-0d78f3d2012b",
          "name": "TC_1.4. Register new user - no fullname",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "f7b6755c-3c32-4d7d-bbc4-cc53be16f63a",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bdbb7e88-d41e-4219-99be-c5128693a510"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "6c931084-46a0-4e86-b656-0601b309a153",
          "timestamp": 1739861868435,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4bc0501a-742a-4168-a997-28994ab984e1",
          "name": "TC_1.5. Register new user - no email",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "531bfd62-7ee2-422a-a162-4012fe4101fc",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e30e1312-2ae7-44e6-8427-756521e64ca2"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "8635d1e0-fac9-4506-8f6e-aafba14346f2",
          "timestamp": 1739861868528,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2b6a9a71-17c8-4672-b854-4f279a39cce6",
          "name": "TC_1.6. Register new user - empty username",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "77abadf2-7df7-42de-9bd3-b2b44535fe64",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "11e2b9ab-2720-4181-944b-ea65d254ef45"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "e0189afe-75bf-4295-b0b8-cd200ac387e0",
          "timestamp": 1739861868623,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8a1f2055-d7e5-4c92-b267-33ab1eeb6bf2",
          "name": "TC_1.7. Register new user - empty password",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "34510996-6615-4c3c-bcc1-f2f78130fe61",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b69cb19-26b4-4b98-bbf1-99bd0b3efd3a"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "6af11822-f135-4b25-bfad-f5838645412d",
          "timestamp": 1739861868719,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4015b206-8bac-4036-9d0c-0f3b0f36f386",
          "name": "TC_1.8. Register new user - empy fullname",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "1f604519-d459-40ed-8505-5c625297e74e",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fe6b8d84-e842-4d37-9e6a-947f09615658"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "9a0daff2-8b64-48dc-9c65-40b127820b3d",
          "timestamp": 1739861868813,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b83cef0c-b89e-4957-9f83-16edf4392484",
          "name": "TC_1.9. Register new user - empty email",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "fbc1797f-c44f-4e28-8336-7dc5f6716619",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e038e37d-6643-494b-b9cb-5bb46017d300"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "8d1df7af-2db4-486e-b5d8-8ec91d8cabc3",
          "timestamp": 1739861868908,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8ae5519c-1b94-4378-a1d4-fd28246dbc38",
          "name": "TC_1.10. Register new user - empty all parameters",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "bd2d2a50-46ca-4510-ba4c-dbdcda8799f1",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da4ab013-d725-41a8-b4cc-76ae5d014e7b"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "c6775abe-10b5-4cb2-980b-9b46ccec96b6",
          "timestamp": 1739861868992,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "49dbdb89-5724-47ba-908b-c42866c2afea",
          "name": "TC_2.1.1. Register new user - login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "register"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "624f8188-e4d4-4855-86ef-8e4f3dd5a48e",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"Petras123\", \r\n\"fullName\": \"Petras Petraitis\", \r\n\"email\": \"Petras.Petrastis@gmail.com\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "54ffcf11-7558-45e2-92d6-f7a8d1c68b1f",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "09d1f169-83bd-4277-a3f6-e75df98f8ec6"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "69f9cd53-aa34-44eb-9792-1088966e52e5",
          "timestamp": 1739861869071,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7b0c9701-e10f-44a8-9937-c3c580019e7e",
          "name": "TC_2.1.2. Positive login",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "user"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8a6b4809-8656-40e9-940f-6b1bd79afb2d",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "abe76f24-6e6a-45cd-afc3-c6ecaf28e166",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4bb5b68e-984b-4df9-8740-caffbf0430e5"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "63fb1889-c8cb-4632-83de-d0eeb85e41fb",
          "timestamp": 1739861869164,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2ed19610-3264-48d2-a761-929b647c7298",
          "name": "TC_2.2. Negative login - no username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5b019d2c-8aec-40b3-a270-9524f0f71b01",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "b710ffe5-b5fa-4d4a-bd06-ac404b462516",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "40cc0b6f-e365-4531-8a61-c46d9f1f64e4"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "20ab6d71-6d62-436e-a7de-2cf2663b7349",
          "timestamp": 1739861869256,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "68eb20ca-088d-4456-b23a-541eb07f00fa",
          "name": "TC_2.3. Negative login - no password",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8fc47001-5670-4c1f-af6a-9d91b5b34785",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "e77b5b86-bcd9-443b-88e0-e0eb8564ac0e",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "661b48c3-23fd-4ccd-b4b8-b2220f662e74"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "8b03c6ff-a166-4746-883f-505a28095653",
          "timestamp": 1739861869351,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "948232a0-31e4-4bf3-9509-bd25167ca0db",
          "name": "TC_2.4. Negative login - empty username",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d76de659-c748-4009-83e2-fc0c9ece45ae",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "89aec4ba-bb2c-4d16-8fcb-96eb09ba97ae",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0d31fbdd-158f-4511-a3fa-36db287ad446"
        }
      },
      {
        "error": {
          "errno": -4078,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1615:16)",
          "checksum": "7fe2f9302f188862b73f5a569ade30fa",
          "id": "3d63bf1f-7b85-49bc-8378-0c4128532a93",
          "timestamp": 1739861869444,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1615,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "bb3199d1-39a4-4638-8725-44c107900473",
          "name": "TC_2.5. Negative login - empty password",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "1bc98586-ed27-42c2-9e35-3bd945dd83ab",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "97a7c628-41b8-4bde-8534-296533e3cd17",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6a6ac35b-2874-4e66-87a9-ef80f95a8baf"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "6832e409-f657-4086-befa-ddbc69a0ea37",
          "timestamp": 1739861869555,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2fe5687a-5e0a-4058-89bc-02f351ab5a50",
          "name": "TC_3.1.1. Create new user - Get",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "385917f7-abdb-4e29-bc4a-ca371f417aab",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b57f84f9-66f9-485c-b585-daca5d6e613d"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "9f578488-0bf0-4009-92d9-f89cf7484ef4",
          "timestamp": 1739861869646,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "76b98eed-08ae-4096-9328-7d2848299c11",
          "name": "TC_3.1.2. Positive Get all users",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "c881e972-0e75-4f6f-a769-04f7f032cc4b",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "838a6e1d-98c4-4951-8d9c-9b546e242207"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "15cbc4f9-ba10-4b90-8be4-3cc35c02e21f",
          "timestamp": 1739861869742,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "031d939f-c9e5-4c8d-a71a-feb1fcaf0f5a",
          "name": "TC_3.2. Positive Get user details",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "cd0451d7-cc6c-42b7-b9bb-29f8696260bd",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7f2624a6-b0fd-4a05-a115-c73a7c19eeab"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "a86c6ad5-d1e3-438a-b0c0-c964b09c49f4",
          "timestamp": 1739861869835,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "192c98dd-598f-4dd5-9753-f4ba1246e4a2",
          "name": "TC_3.3. Negative Get not-existing user details",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "27b95fde-7946-48db-94af-b584dfbad50c",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a36e22ff-2f8d-4ee1-8150-dfa22fca9dce"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "8ee356cf-2dde-4fc6-9cab-690a7f68bc3d",
          "timestamp": 1739861869931,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "391bb453-07fe-4149-bbca-0c91fc553ec4",
          "name": "TC_4.1.1. Create new user - logout",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "8a00a399-cd43-43ef-b2f3-2db6e4eefa30",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e8a97b75-b1c1-4316-93e3-00c2b683ad79"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "fb4ce506-53ba-448c-b531-bdd3e997f357",
          "timestamp": 1739861870010,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "74fefa35-5a09-409d-82dc-5c1e4fefc5f3",
          "name": "TC_4.1.2. Login - logout",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "3d51060a-53f6-4072-b14a-23d4aa2b931c",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "58e4dc9e-a07a-41dd-9983-e1b29a9e0dd7"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "3a8399d3-f086-495d-a3ed-b8150898f466",
          "timestamp": 1739861870105,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "82cd9d9f-1d74-43ad-ab72-dfd08a149beb",
          "name": "TC_4.1.3. Positive logout",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "562fec76-e6f5-41c3-90d7-e47faad13d30",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "10c51f7d-5022-424d-893a-78597a6fab49"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "1eaff530-964c-48da-b494-9e043da5905c",
          "timestamp": 1739861870202,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "984d3577-0aec-4219-a111-8618f17eb4f8",
          "name": "TC_5.1.1. Register new user - delete",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "b228b51c-8dcf-4e28-8689-a896f1fc7ab9",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a03a3b99-c326-43fa-88d2-7cdc14e20937"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "636dcb95-1bf8-4dd6-b6bb-30ad6d5d4cca",
          "timestamp": 1739861870298,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c1bcf71b-faf1-4472-b5c1-6d557ed5ea51",
          "name": "TC_5.1.2. Positive Delete new user",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "d19af263-2d86-44f5-bc53-55cd3968b933",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dc5cd918-7e5e-44dc-a534-b3bfb4ac8b7e"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "2ed3786a-12e8-40b0-a8a2-c283620cc555",
          "timestamp": 1739861870377,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "79f686af-bde1-416e-888e-80539d0ff0df",
          "name": "TC_5.1.3. Get user details - delete",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "4446c733-2a0b-4cf4-8aaa-52b6425a0774",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fe4cf83a-8f7a-4937-bf6a-a7c33253ab2f"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "c81fb234043f06e3cade660d90cca47f",
          "id": "ed09548c-5758-46be-a3c2-22a101f3e148",
          "timestamp": 1739861870472,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\stani\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b007b9cc-a9f7-4501-8027-b6b473b17d82",
          "name": "TC_5.2. Delete non-existing user",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "aba20926-59b0-4882-8851-8f6c3bb7fec3",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "14846444-4c0f-420f-9fc3-b8dba35d41e4"
        }
      }
    ],
    "error": null
  }
}