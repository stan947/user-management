{
	"info": {
		"_postman_id": "a91880a3-7caf-4158-b0eb-d4a461322498",
		"name": "UserManagement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41703265"
	},
	"item": [
		{
			"name": "TS_01. Register new user",
			"item": [
				{
					"name": "TC_1.1.1. Positive register new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomUsername = \"user_\" + Math.floor(Math.random() * 10000);\r",
									"\r",
									"const uniquePassword = \"psw\" + Date.now();\r",
									"    let requestBody =  {\r",
									"        \"username\": randomUsername,\r",
									"        \"password\": uniquePassword,\r",
									"        \"fullName\": \"Vardenis Pavardenis\",\r",
									"        \"email\": \"demo@demo.com\"\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"registerNewUserName\", randomUsername)\r",
									"    pm.collectionVariables.set(\"registerNewUserPassword\", uniquePassword)\r",
									"\r",
									"    pm.request.body.raw = JSON.stringify(requestBody)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User object schema is valid\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.user).to.be.an('object');\r",
									"  pm.expect(responseData.user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
									"  pm.expect(responseData.user.fullName).to.exist.and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
									"  pm.expect(responseData.user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.1.2. Get user details -register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.user.username).to.exist;\r",
									"    pm.expect(responseData.user.fullName).to.exist;\r",
									"    pm.expect(responseData.user.email).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Username and email are in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/user/:{{registerLoginUserName}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								":{{registerLoginUserName}}"
							],
							"variable": [
								{
									"key": "{{registerLoginUserName}}",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.2. Register new user - no username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema is as expected\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('error');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"username\": \"Jonas\", \r\n\"password\": \"jonas234\"\r\n\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.3. Register new user - no password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"jonas123\"\r\n\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.4. Register new user - no fullname",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_1.5. Register new user - no email",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_1.6. Register new user - empty username",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_1.7. Register new user - empty password",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_1.8. Register new user - empy fullname",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_1.9. Register new user - empty email",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_1.10. Register new user - empty all parameters",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "TS_02. Login (register and login)",
			"item": [
				{
					"name": "TC_2.1.1. Register new user - login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"username\": \"Petras\", \r\n\"password\": \"Petras123\", \r\n\"fullName\": \"Petras Petraitis\", \r\n\"email\": \"Petras.Petrastis@gmail.com\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.1.2. Positive login",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.2. Negative login - no username",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.3. Negative login - no password",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.4. Negative login - empty username",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.5. Negative login - empty password",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TS_03. Get users",
			"item": [
				{
					"name": "TC_3.1.1. Create new user - Get",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_3.1.2. Positive Get all users",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_3.2. Positive Get user details",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_3.3. Negative Get not-existing user details",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "TS_04. Logout (register, login and logout)",
			"item": [
				{
					"name": "TC_4.1.1. Create new user - logout",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_4.1.2. Login - logout",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_4.1.3. Positive logout",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "TS_05. Delete (Register and delete user)",
			"item": [
				{
					"name": "TC_5.1.1. Register new user - delete",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_5.1.2. Positive Delete new user",
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_5.1.3. Get user details - delete",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "TC_5.2. Delete non-existing user",
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "registerLoginUserName",
			"value": ""
		},
		{
			"key": "registerLoginPassword",
			"value": ""
		},
		{
			"key": "registerLoginWrongPassword",
			"value": ""
		},
		{
			"key": "registerGetUserName",
			"value": ""
		},
		{
			"key": "registerGetPassword",
			"value": ""
		},
		{
			"key": "registerNewUserName",
			"value": ""
		},
		{
			"key": "registerNewUserPassword",
			"value": ""
		},
		{
			"key": "registerLoginUserPassword",
			"value": ""
		}
	]
}